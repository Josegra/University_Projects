Ejercicio 1
A continuación, vamos a realizar las siguientes consultas y para ello vamos a necesitar los archivos incluidos en el comprimido operaciones_ucm.zip disponibles en la plataforma del máster:
- Crear una base de datos con el nombre tarea_ucm.
- Crear un esquema de base de datos con el nombre operaciones_ucm.
- Creamos las tres tablas correspondientes a los 3 archivos: orders, refunds y merchants. Recuerda seleccionar el tipo de dato más adecuado para cada uno de los campos de las tres tablas.
- Opcional: Si estamos realizando los ejercicios sobre Snowflake, rellenamos las tablas a partir de los datos incluidos en los archivos *.csv.

CREATE DATABASE tarea_ucm;
CREATE SCHEMA "operaciones_ucm";

CREATE TABLE "TAREA_UCM"."operaciones_ucm"."orders"
(
    order_id VARCHAR(16777216),
    created_at date,
    status VARCHAR(16777216),
    amount float,
    refunded_at TIMESTAMP_TZ(9),
    merchant_id VARCHAR(16777216),
    country VARCHAR(16777216)
) ;

CREATE TABLE "TAREA_UCM"."operaciones_ucm"."merchants"
(
    merchant_id VARCHAR(16777216),
    name VARCHAR(16777216)
) ;


CREATE TABLE "TAREA_UCM"."operaciones_ucm"."refunds"
(
    order_id VARCHAR(16777216),
    refunded_at TIMESTAMP_TZ(9),
    amount float
) ;

Para crear el file format y cargar las tablas en Snowflake :

CREATE FILE FORMAT "TAREA_UCM"."PUBLIC".csv_new TYPE = 'CSV' COMPRESSION = 'AUTO' FIELD_DELIMITER = ';' RECORD_DELIMITER = '\n' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\N');





Ejercicio 2
A partir de las tablas incluidas en la base de datos tarea_ucm, vamos a realizar las siguientes consultas:
1. Realizamos una consulta donde obtengamos por país y estado de operación, el total de operaciones y su importe promedio. La consulta debe cumplir las siguientes condiciones:
a. Operaciones posteriores al 01-07-2015.
b. Operaciones realizadas en Francia, Portugal y España.
c. Operaciones con un valor mayor de 100 € y menor de 1500€.
Ordenamos los resultados por el promedio del importe de manera descendente.

SELECT COUNTRY,STATUS,COUNT(ORDER_ID) AS TOTAL_OPERACIONES,AVG(AMOUNT) AS importe_promedio FROM "TAREA_UCM"."operaciones_ucm"."orders"
WHERE CREATED_AT::date >'2015-07-01' AND COUNTRY IN ('Francia','Portugal' ,'España') AND AMOUNT BETWEEN 100 AND 1500
GROUP BY COUNTRY,STATUS
ORDER BY importe_promedio DESC;

2. Realizamos una consulta donde obtengamos los 3 países con el mayor número de operaciones, el total de operaciones, la operación con un valor máximo y la operación con el valor mínimo para cada país. La consulta debe cumplir las siguientes condiciones:
a. Excluimos aquellas operaciones con el estado “Delinquent” y “Cancelled”.
b. Operaciones con un valor mayor de 100 €.

SELECT TOP 3 COUNTRY,COUNT(ORDER_ID) AS NUMERO_OPERACIONES, MAX(AMOUNT) AS VALOR_MAXIMO, MIN(AMOUNT) AS VALOR_MINIMO FROM "TAREA_UCM"."operaciones_ucm"."orders"
WHERE STATUS NOT IN ('DELINQUENT','CANCELLED') AND AMOUNT > 100
GROUP BY COUNTRY
ORDER BY NUMERO_OPERACIONES DESC;


Ejercicio 3
A partir de las tablas incluidas en la base de datos tarea_ucm vamos a realizar las siguientes consultas:
1. Realizamos una consulta donde obtengamos, por país y comercio, el total de operaciones, su valor promedio y el total de devoluciones. La consulta debe cumplir las siguientes condiciones:
a. Se debe mostrar el nombre y el id del comercio.
b. Comercios con más de 10 ventas.
c. Comercios de Marruecos, Italia, España y Portugal.
d. Creamos un campo que identifique si el comercio acepta o no devoluciones. Si no acepta (total de devoluciones es igual a cero) el campo debe contener el valor “No” y si sí lo acepta (total de devoluciones es mayor que cero) el campo debe contener el valor “Sí”. Llamaremos al campo “acepta_devoluciones”.
Ordenamos los resultados por el total de operaciones de manera ascendente.

SELECT O.COUNTRY,COUNT(O.ORDER_ID) AS TOTAL_OPERACIONES, AVG(O.AMOUNT) AS VALOR_PROMEDIO, COUNT(O.REFUNDED_AT) AS TOTAL_DEVOLUCIONES,M.MERCHANT_ID,M.NAME,CASE
WHEN  COUNT(O.REFUNDED_AT) > 0 THEN 'YES' WHEN  COUNT(O.REFUNDED_AT) = 0 THEN 'NO'
END AS ACEPTA_DEVOLUCIONES
FROM "TAREA_UCM"."operaciones_ucm"."orders" O, "TAREA_UCM"."operaciones_ucm"."merchants" M
WHERE UPPER(COUNTRY) IN ('MARRUECOS', 'ITALIA', 'ESPAÑA', 'PORTUGAL') AND O.MERCHANT_ID=M.MERCHANT_ID
GROUP BY O.COUNTRY,M.MERCHANT_ID,M.NAME
HAVING COUNT(O.ORDER_ID) > 10
ORDER BY TOTAL_OPERACIONES ASC ;


2. Realizamos una consulta donde vamos a traer todos los campos de las tablas operaciones y comercios. De la tabla devoluciones vamos a traer el conteo de devoluciones por operación y la suma del valor de las devoluciones.
Una vez tengamos la consulta anterior, creamos una vista con el nombre orders_view
dentro del esquema tarea_ucm con esta consulta.
Nota: La tabla refunds contiene más de una devolución por operación por lo que para hacer el cruce es muy importante que agrupemos las devoluciones.


create or replace view TAREA_UCM."operaciones_ucm"."orders_view"(
	ORDER_ID,
	CREATED_AT,
	STATUS,
	AMOUNT,
	REFUNDED_AT,
	MERCHANT_ID,
	COUNTRY,
	NAME,
	NUM_REFUNDS,
	VALUE_REFUNDS
) as
(
    SELECT O.*, M.NAME, COUNT(R.ORDER_ID) NUM_REFUNDS, SUM(R.AMOUNT) VALUE_REFUNDS
    FROM "TAREA_UCM"."operaciones_ucm"."orders" O
    JOIN "TAREA_UCM"."operaciones_ucm"."merchants" M ON O.MERCHANT_ID=M.MERCHANT_ID
    JOIN "TAREA_UCM"."operaciones_ucm"."refunds" R ON O.ORDER_ID=R.ORDER_ID
    GROUP BY 1,2,3,4,5,6,7,8

);


En caso de que alguno de las consultas no funcionen por algun error ajeno a ellas, le dejo los resultados de las consultas hechas en mi cuenta de Snowflake en el siguiente link de Github :

https://github.com/Josegra/Master-Big-Data-y-Data-Science/blob/main/Documentaci%C3%B3n%20bases%20de%20datos%20SQL-20230323/Tarea/TAREA_SQL_JOSE_GABRIEL_GONZALEZ_PARRA%20(1).pdf
